#include "stdio.h"
#include "malloc.h"
#include "queue.h"
#include "stdlib.h"


typedef struct FixedMultiStack {
    int count;
    int size;
    int *start;
    int top;
} FixedMultiStack;

FixedMultiStack *create_stack(const int arr[], int size, int stack_number) {
    FixedMultiStack *new = malloc(sizeof(FixedMultiStack *));
    int start = new->count * size;
    new->size = size;
    new->start = &arr[start];
    new->count = stack_number;
    new->top = -1; // some unallowed value;
    return new;
};

int getElement(FixedMultiStack *stk, int index) {
    int from = stk->size * stk->count;
    int to = from + stk->size - 1;
//    printf("from: %d - to: %d", from, to);
    if (index < from || index > to) {
        printf("\n Index error \n");
        exit(1);
    }
    return stk->start[index];
}

void push_to(FixedMultiStack *stk, int value) {
    if (stk->top+1 > (stk->size - 1)) {
        printf("\n Stack is full \n");
        exit(1);
    }
    stk->start[++stk->top] = value;
}

int pop_from(struct FixedMultiStack *stk) {
    if (stk->top < 0) {
        printf("\n Stack is empty \n");
        exit(1);
    }
    int elem = stk->start[stk->top];
    stk->start[stk->top] = 0;
    stk->top--;
    return elem;
}
void print_stack(FixedMultiStack *stk) {
    int from = stk->size * stk->count;
    int to = from + stk->size;
    for(int i=from; i<to;i++) {
        printf("%d\n", stk->start[i]);
    }
}

int main() {
    int array[15] = {0};
    FixedMultiStack *first = create_stack(array, 5, 0);
    FixedMultiStack *second = create_stack(array, 5, 1);

    push_to(first, 10);
    push_to(first, 20);
    pop_from(first);
    pop_from(first);

    push_to(first, 30);
    push_to(first, 40);
    push_to(first, 50);
    push_to(first, 60);
    push_to(first, 70);

    print_stack(first);

    push_to(second, 80);
    push_to(second, 90);
    print_stack(second);

    print_stack(first);
}
